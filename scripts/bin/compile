#!/usr/bin/env bash

#-------------------------------------------------------------------------*
# Author: jason@MiniBeast
#
# Here you can edit the directories that compile uses.
# Do NOT add a trailing / to the end of the directory!!!
#
# The source directory where packages will be kept
SRC_DIR=$HOME/.build/sources
#
# Directory where compile will output errors.
RUNTIME_DIR=$XDG_RUNTIME_DIR
#
# Do not make any edits below this line
#-------------------------------------------------------------------------*
exoe() {
    echo -e "\033[1;31m${1}\033[0m" >&2
    exit 1
}
add_key() {
    key="$(cat $RUNTIME_DIR/compile_error | grep -m 1 FAILED | awk -F "key" '{print $2}')"
    gpg --recv-keys --keyserver hkp://keys.gnupg.net "${key::-1}"
    keys+=${key::-1}
}
upd() {
    if sudo pacman -Sy > /dev/null 2>&1; then
        pacman -Qu
        echo
        echo -en  "\033[1;34m:: \033[1;37mCompile $(pacman -Qu | wc -l) packages? \033[0m[y/N]: "
        read -n 1 REPLY
        echo
        [[ $REPLY =~ ^[Yy]$ ]] && comp $(pacman -Qu | awk '{print $1}')
        exit
    else
        exoe "Cannot refresh database"
    fi
}
comp() {
    for pkg in "$@"
    do
        rm -rf $SRC_DIR/{packages,community}/$pkg
        echo -e "\033[1;34m:: \033[1;37mDownloading $pkg PKGBUILD...\033[0m"
        svn update $SRC_DIR/{packages,community}/$pkg >> /dev/null
            if [ -f "$SRC_DIR/packages/$pkg/trunk/PKGBUILD" ]; then
            cd $SRC_DIR/packages/$pkg/trunk/
        elif [ -f "$SRC_DIR/community/$pkg/trunk/PKGBUILD" ]; then
            cd $SRC_DIR/community/$pkg/trunk/
        else
            echo -e "\033[1;31m$pkg not found\033[0m\n"
            failed+=("${pkg} - \033[31mPackage not found\033[0m")
            continue
        fi
        echo -e "\n\033[1;34m:: \033[1;37mAttemping compilation\033[0m\n"
        if makepkg -Lsi --noconfirm 2> $RUNTIME_DIR/compile_error; then
            echo -e "\033[1;34m:: \033[1;37mInstallation successful\033[0m\n"
            successful+=("${pkg}")
        else
            cat $RUNTIME_DIR/compile_error | grep -q "unknown public key"
            echo -e "\033[1;34m:: \033[1;33mAdding key and retrying...\033[0m"
            add_key
            if makepkg -Li --noconfirm 2> $RUNTIME_DIR/${pkg}-error.txt; then
                echo -e "\033[1;34m:: \033[1;37mInstallation successful\033[0m\n"
                successful+=("${pkg}")
            else
                echo -e "\033[1;31mFailed to compile ${pkg}"
                failed+=("${pkg} - \033[31mSee ${RUNTIME_DIR}/${pkg}-error.txt\033[0m")
            fi
        fi
    done
    if [ -z "$failed" ]; then
        echo -e "\033[1;34m:: \033[1;37mAll packages compiled and installed successfully\033[0m\n"
        for i in "${successful[@]}"; do
            echo -e "$i" ; done
        if [ ! -z "$keys" ]; then
            echo -e "\n\033[1;34m:: \033[1;37mKeys added:\033[0m"
            for i in "${keys[@]}"; do
                echo -e "$i" ; done
        fi
    elif [ -z "$successful" ]; then
        echo -e "\n\033[1;34m:: \033[1;31mFailed:\033[0m"
        for i in "${failed[@]}"; do
            echo -e "$i" ; done
        if [ ! -z "$keys" ]; then
            echo -e "\n\033[1;34m:: \033[1;37mKeys added:\033[0m\n"
            for i in "${keys[@]}"; do
                echo -e "$i" ; done
        fi
    else
        echo -e "\n\033[1;34m:: \033[1;37mSuccessful:\033[0m"
        for i in "${successful[@]}"; do
            echo -e "$i" ; done
        echo -e "\n\033[1;34m:: \033[1;31mFailed:\033[0m"
        for i in "${failed[@]}"; do
            echo -e "$i" ; done
        if [ ! -z "$keys" ]; then
            echo -e "\n\033[1;34m:: \033[1;37mKeys added:\033[0m"
            for i in "${keys[@]}"; do
                echo -e "$i" ; done
        fi
    fi
}
while getopts 'u' flag; do
    case "${flag}" in
        u)
            upd; exit
            ;;
        *)
            exoe "Invalid usage"
            ;;
    esac
done
comp "$@"
